{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","userState","movies","setMovies","useState","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","scr","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5627e12.chunk.js","sourcesContent":["import axios from \"axios\";\n\n// base url to make requests to the movie database //\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;\n","import React, { userState, useEffect, useState } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\n// need this base url for the images because they come back as jpg insted of a url\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = userState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  // i need a snippet of code which runs based on a specific condition/varaible\n  useEffect(() => {\n    // if [] is empty, runs once when the row loads, and does not run again\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  //this was taken from the react youtube website\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1,\n    },\n  };\n\n  const handleClick = (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie?.name || \"\")\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get(\"v\"));\n        })\n        .catch((error) => console.log(error));\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n\n      <div className=\"row__posters\">\n        {/* several row__posters */}\n\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n            scr={`${base_url}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      <YouTube videoId={trailerUrl} opts={opts} />\n    </div>\n  );\n}\n\nexport default Row;\n","const API_KEY = \"9c043ef0eeb16186564a73af43521453\";\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\n\nexport default requests;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport requests from \"./requests\";\nimport \"./Banner.css\";\n\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      setMovie(\n        requests.data.results[\n          Math.floor(Math.random() * requests.data.results.length - 1)\n        ]\n      );\n      return requests;\n    }\n    fetchData();\n  }, []);\n\n  console.log(movie);\n\n  //  functioni found online works really well\n  function truncate(str, n) {\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  }\n\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\n          \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n        )`,\n        backgroundPosition: \"center center\",\n      }}\n    >\n      <div className=\"banner__contents\">\n        {/* using || and ? for errors (oprional chaining) */}\n        <h1 className=\"banner__title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n\n        <div className=\"banner__buttons\">\n          <button className=\"banner__button\">Play</button>\n          <button className=\"banner__button\">My List</button>\n        </div>\n\n        <h1 className=\"banner__description\">\n          {truncate(movie?.overview, 150)}\n        </h1>\n      </div>\n\n      <div className=\"bannner--fadeBottom\" />\n    </header>\n  );\n}\n\nexport default Banner;\n","import React from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\nimport requests from \"./requests\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      {/* nav bar */}\n\n      <Banner />\n\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow={true}\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}